#!/usr/bin/python

"""
Reprocess a job using the current
"""
import os, json, sys, logging
from argparse import ArgumentParser
import dahu.factory
logging.basicConfig()

STATE_UNINITIALIZED = "uninitialized"
STATE_RUNNING = "running"
STATE_SUCCESS = "success"
STATE_FAILURE = "failure"
STATE_ABORTED = "aborted"
STATE = [STATE_UNINITIALIZED, STATE_RUNNING, STATE_SUCCESS, STATE_FAILURE, STATE_ABORTED]



def parse():
    """
    Parse the command line a return the parsed arguments
    """
    # TODO
    parser = ArgumentParser(description='reProcess some data using the Dahu')
    parser.add_argument("-d", '--debug', dest='debug', action='store_true',
                        default=False, help='debug mode')
    parser.add_argument(dest='args', nargs='+', help='job inputs to be re-processed')
    args = parser.parse_args()
    if args.debug:
        logging.root.setLevel(logging.DEBUG)
    return args.args


def _run_(plugin, what):
    """
    run setup, process, teardown or abort ...

    @param what: setup, process or teardown
    @parma args: argument list to be passed to the method
    @return : execution code
    """

    methods = {"process":  plugin.DEFAULT_PROCESS,
               "setup":    plugin.DEFAULT_SET_UP,
               "teardown": plugin.DEFAULT_TEAR_DOWN,
               "abort":    plugin.DEFAULT_ABORT    }
    assert what in methods
    name = methods.get(what)
    if name in dir(plugin):
        method = plugin.__getattribute__(name)
        if "__call__" in dir(method):
            try:
                method()
            except Exception as error:
                import traceback
                err_msg = [traceback.format_exc(limit=10), ""
                           "Error %s while calling %s.%s" %
                           (error, plugin.__class__.__name__, what)]
                print(os.linesep.join(err_msg))
                return STATE_FAILURE
            else:
                return STATE_RUNNING
    else:
        print("No such method %s in class %s" % (what, plugin.__class__.__name__))
        return STATE_FAILURE


def process(args):
    """
    Process a set of arguments
    """
    for idx, fn in enumerate(args):
        print("Processing #%i: %s" % (idx, fn))
        if os.path.exists(fn):
            with open(fn, "r") as fp:
                dico = json.load(fp)
        else:
            logging.warning("No such file: %s" % fn)
            continue
        plugin_name = dico["plugin_name"]
        dico["jon_id"] = idx
        plugin = dahu.factory.plugin_factory(plugin_name)
        plugin.input = dico
        state = _run_(plugin, "setup")
        if state == STATE_RUNNING:
            status1 = _run_(plugin, "process")
            status2 = _run_(plugin, "teardown")
            if status1 == STATE_RUNNING and status2 == STATE_RUNNING:
                state = STATE_SUCCESS
            else:
                state = STATE_FAILURE
        print("Finished with state: %s" % state)
        dst_file = fn + ".out"
        filecnt = len(glob.glob(dst_file + "*"))
        if filecnt:
            dst_file += str(filecnt)
        result = json.dumps(plugin.output, indent=2)
        with open(dst_file, "w") as fp:
            fp.write(result)
        print(result)

if __name__ == "__main__":
    args = parse()
    process(args)
